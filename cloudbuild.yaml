steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/python-app-vm/python-app-vm:latest', '.']

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/python-app-vm/python-app-vm:latest']

  # Step 3: Create instance template for MIG
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute instance-templates create python-app-template \
          --machine-type=e2-medium \
          --tags=http-server \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --metadata=startup-script="#!/bin/bash
            apt update
            apt install -y docker.io
            systemctl enable docker
            systemctl start docker
            gcloud auth configure-docker us-central1-docker.pkg.dev
            docker pull us-central1-docker.pkg.dev/$PROJECT_ID/python-app-vm/python-app-vm:latest
            docker stop python-app-vm || true
            docker rm python-app-vm || true
            docker run -d --name python-app-vm -p 8080:8080 us-central1-docker.pkg.dev/$PROJECT_ID/python-app-vm/python-app-vm:latest
          "

  # Step 4: Create the Managed Instance Group
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      [
        'compute', 'instance-groups', 'managed', 'create', 'python-app-mig',
        '--base-instance-name', 'python-app',
        '--size', '2',
        '--template', 'python-app-template',
        '--zone', 'us-central1-a'
      ]

  # Step 5: Optional: Configure auto-scaling
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      [
        'compute', 'instance-groups', 'managed', 'set-autoscaling', 'python-app-mig',
        '--max-num-replicas', '5',
        '--min-num-replicas', '1',
        '--target-cpu-utilization', '0.6',
        '--zone', 'us-central1-a'
      ]

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/python-app-vm/python-app-vm:latest'

options:
  logging: CLOUD_LOGGING_ONLY
