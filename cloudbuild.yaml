options:
  logging: CLOUD_LOGGING_ONLY   #  Fix for service account + logging requirement

steps:
# 1. Build Docker image
- name: 'gcr.io/cloud-builders/docker'
  args:
    ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/myapp:$SHORT_SHA', '.']

# 2. Push Docker image
- name: 'gcr.io/cloud-builders/docker'
  args:
    ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/myapp:$SHORT_SHA']

# 3. Create instance template for GREEN
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - compute
    - instance-templates
    - create-with-container
    - green-template-$SHORT_SHA
    - --container-image=us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/myapp:$SHORT_SHA
    - --machine-type=e2-medium

# 4. Create or update GREEN MIG
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - compute
    - instance-groups
    - managed
    - create
    - green-mig
    - --template=green-template-$SHORT_SHA
    - --size=2
    - --zone=us-central1-a

# 5. Add GREEN MIG to backend service with 0% traffic
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - compute
    - backend-services
    - add-backend
    - python-app-mig
    - --instance-group=green-mig
    - --instance-group-zone=us-central1-a
    - --capacity-scaler=0.0
    - --global

# 6. Run smoke test (replace with your healthcheck path or external IP)
- name: 'curlimages/curl'
  args:
    ['curl', '-f', 'http://GREEN_MIG_TEST_IP/healthz']

# 7. Promote GREEN (switch traffic)
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - compute
    - backend-services
    - update-backend
    - python-app-mig
    - --instance-group=green-mig
    - --instance-group-zone=us-central1-a
    - --capacity-scaler=1.0
    - --global

- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - compute
    - backend-services
    - update-backend
    - python-app-mig
    - --instance-group=blue-mig
    - --instance-group-zone=us-central1-a
    - --capacity-scaler=0.0
    - --global
